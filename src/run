#!/usr/bin/python3

"""
Couchbase Antora Previewer

Simply clones the base Couchbase documentation site, patches in user
specified repositories, then exposes the generated static content via
a web server.
"""

import argparse
import logging
import os
import subprocess
import sys
import time
import yaml

BASE_REPO = 'docs-site'
PLAYBOOK_SRC = 'antora-playbook.yml'
PLAYBOOK = 'anotora-preview-playbook.yml'
ANTORA_HOME = '/antora'


class Executor(object):
    """
    Helper functions for execution of external commands
    """

    @staticmethod
    def _execute(command, env):
        """Execute a command returning the exit code and output"""

        logging.debug('Executing command: %s', ' '.join(command))
        proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)
        stdout, stderr = proc.communicate()
        return proc.returncode, stdout, stderr

    @staticmethod
    def execute(command, env=None):
        """Execute a command saving the output to the debug logs"""

        returncode, stdout, stderr = Executor._execute(command, env=env)
        logging.debug('stdout: \n%s', stdout)
        logging.debug('stderr: \n%s', stderr)
        if returncode != 0:
            raise RuntimeError
        return stdout, stderr


def init_logging(args):
    """Setup logging to stdout with nice formatting"""

    level = logging.INFO
    if args.debug:
        level = logging.DEBUG

    logging.getLogger().setLevel(level)
    formatter = logging.Formatter(fmt='%(asctime)s.%(msecs)03d %(levelname)s %(message)s',
                                  datefmt='%Y-%m-%d %H:%M:%S')
    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(formatter)
    logging.getLogger().addHandler(handler)


def get_repo_homes(args):
    """Given repo specifications get home pages for file based repos only"""

    paths = []
    for repo in args.repos:
        # Reject non absolute paths
        if repo['url'][0] != '/':
            continue

        # Work out where the yaml configuration is
        repo_config_file = repo['url']
        if 'start_path' in repo:
            repo_config_file += '/' + repo['start_path']
        repo_config_file += '/antora.yml'

        # Get the start page, defaulting to 'index'
        with open(repo_config_file) as filedesc:
            repo_config = yaml.safe_load(filedesc.read())

        start_page = 'index'
        if 'start_page' in repo_config:
            module, filename = tuple(str(repo_config['start_page']).split(':'))
            start_page, _ = os.path.splitext(filename)
            if module != 'ROOT':
                start_page = module + '/' + start_page

        host = 'http://localhost:' + args.port
        path = '/' + repo_config['name'] + '/' + repo_config['version'] + '/' + start_page + '.html'
        paths.append(host + path)

    return paths


def init_repo(args):
    """Clone the most recent Couchbase docs repo, patch in our module, generate content"""

    logging.info('Cloning latest document repository ...')
    os.chdir(ANTORA_HOME)
    Executor.execute(['git', 'clone', 'https://github.com/couchbase/' + BASE_REPO])

    logging.info('Creating site playbook ...')
    os.chdir(ANTORA_HOME + '/' + BASE_REPO)
    with open(PLAYBOOK_SRC) as filedesc:
        playbook = yaml.safe_load(filedesc.read())

    # Override anything to limit scope to this repo only.
    site_url = 'http://localhost:' + args.port
    playbook['site']['url'] = site_url
    playbook['content']['sources'] = args.repos

    # Remove crap that causes fail.
    del playbook['urls']

    playbook_yaml = yaml.dump(playbook, default_flow_style=False)
    logging.debug(playbook_yaml)
    with open(PLAYBOOK, 'w') as filedesc:
        filedesc.write(playbook_yaml)

    logging.info("Generating static content ...")
    os.chdir(ANTORA_HOME + '/' + BASE_REPO)
    Executor.execute(['antora', PLAYBOOK])

    logging.info('Serving content on %s', site_url)
    for home in get_repo_homes(args):
        logging.info('Serving repo content on %s', home)


def init_httpd():
    """Start the HTTP daemon when the vhost directory is created"""

    logging.info('Starting webserver ...')
    Executor.execute(['httpd', '-k', 'start'])


def init_slumber():
    """Sleep until we are killed"""

    logging.info('Press Ctl+C to exit ...')
    while True:
        time.sleep(10)


def parse_repos(args):
    """Parses raw repo arguments and expands them into a repos argument"""

    # If no repos are provided provide a default
    if not args.repo:
        logging.info('Using default repo path /src')
        args.repo = ['url=/src']

    # Process specified repositories.
    # We expect 'url=/mnt/docs,branches=master:1.0.0,start_path=docs'
    repos = []
    for repo in args.repo:
        repo_args = dict(tuple(arg.split('=')) for arg in repo.split(','))
        required = [
            'url',
        ]
        for req in required:
            if req not in repo_args:
                logging.error('Missing %s argument in repo specification')

        # Enter the git repo for the duration
        os.chdir(repo_args['url'])

        # Parse the selected branches or derive the current branch
        if 'branches' in repo_args:
            repo_args['branches'] = repo_args['branches'].split(':')
        else:
            if repo_args['url'].startswith('/'):
                stdout, _ = Executor.execute(['git', 'rev-parse', '--abbrev-ref', 'HEAD'])
                branch = stdout.decode('utf-8').strip()
                logging.info("Using branch %s", branch)
                repo_args['branches'] = [branch]

        # Derive the start path
        if 'start_path' not in repo_args:
            done = False
            for root, _, files in os.walk('.'):
                if done:
                    break
                for filename in files:
                    if filename == 'antora.yml':
                        logging.info('Using path %s', root)
                        repo_args['start_path'] = root
                        done = True
                        break
        if not done:
            logging.error('Unable to find antora.yml')
            sys.exit(1)

        repos.append(repo_args)

    args.repos = repos


def main():
    """Parse arguments, setup logging and run the main meat"""

    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true', default=False)
    parser.add_argument('-p', '--port', default='8080')
    parser.add_argument('-r', '--repo', action='append')
    args = parser.parse_args()

    init_logging(args)
    parse_repos(args)

    try:
        init_repo(args)
        init_httpd()
        init_slumber()
    except KeyboardInterrupt:
        logging.info('Caught interrupt exiting ...')


if __name__ == '__main__':
    main()

# vi: ts=4 et:
